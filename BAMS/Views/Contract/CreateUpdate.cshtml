@using BAMS.Data.Models;

@{
    var contract = (Contract)ViewData["Contract"];
    long projectUid = (long)ViewData["ProjectUid"];
    var projectList = ViewData["ProjectList"] as List<Project>;
    long contractUid = contract?.Uid ?? 0;

    var title = "Update";
    if(contract == null)
    {
        title = "Create";
    }
}

<div class="col-4">
	<div class="card card-primary">
	    <div class="card-header">
            <h3 class="card-title">@title Contract</h3>
	    </div>
        <div class="card-body">
            <div class="form-group">
                <input type="hidden" id="contractUid" value="@contractUid" />
                <label>Name </label>
                <select class="form-control" id="projectUid">
                    @foreach (var project in projectList)
                    {
                        if (project.Uid == projectUid)
                        {
                            <option selected value="@project.Uid">@project.Name</option>
                        }
                        else
                        {
                            <option value="@project.Uid">@project.Name</option>

                        }
                    }
                </select>
            </div>
            <div class="form-group">
                <label>Contract Name  </label>
                <input autocomplete="off" class="form-control" type="text" id="name" placeholder="Contract name" value="@contract?.Name" />
            </div>
            <div class="form-group">
                <label>Start Date </label>
                <input autocomplete="off" class="form-control" type="date" id="startDate" value="@((contract?.StartDate ?? DateTime.Today).ToString("yyyy-MM-dd"))" />
            </div>
            <div class="form-group">
                <label>End Date  </label>
                <input autocomplete="off" class="form-control" type="date" id="endDate" value="@((contract?.EndDate ?? DateTime.Today).ToString("yyyy-MM-dd"))" />
            </div>
            <div class="form-group">
                <label>Activation codes</label>
                <input autocomplete="off" class="form-control" type="number" id="students" placeholder="Number of activation codes" value="@contract?.ActivationCodes" />
            </div>   
            <div class="form-group">
                <label>Remarks  </label>
                <input autocomplete="off" class="form-control" type="text" id="remarks" placeholder="Remarks" value="@contract?.Remarks" />
            </div>
            @*<input type="text" id="status" placeholder="Status" value="@contractData?.Status"/>*@
        
            <div class="form-group mt-3">
                <button class="mt-4 btn btn-primary" id="save" type="button">Save</button>
                <button class="mt-4 btn btn-danger" id="cancel" type="button">Cancel</button>
            </div>
        </div>
	</div>
</div>


@section Scripts{
    <script>
        $(document).ready(function () {
            $("#save").click(save);            
        });

        function save(){

            let uid = parseInt($("#contractUid").val());

            let contract = {
                uid: uid,
                projectUid: parseInt($("#projectUid").val()),
                name: $("#name").val(),
                startDate: new Date($("#startDate").val()),
                endDate: new Date($("#endDate").val()),
                students: parseInt($("#students").val()) || 0,
                remarks: $("#remarks").val(),
            };

            let validationResult = validateInput(contract)
            if (validationResult.length > 0) {
                Swal.fire({
                    title: 'Data Validation',
                    html: validationResult.join('<br>'),
                    icon: 'error'
                });
                return;
            }
                        
            let url = uid == 0
                ? '@Url.Action("Create", "Contract")'
                : '@Url.Action("Update", "Contract")';
                            
            sendRequest(url, JSON.stringify(contract));            
        }

        function validateInput(input) {
            let err = [];
            if(input.projectUid == ""){
                err.push("Project cannot empty");
            }
            if(input.name == ""){
                err.push("Contract name cannot be empty");
            }
            if(input.startDate == "Invalid Date"){
                err.push("Start Date Invalid");
            }
            if(input.endDate == "Invalid Date"){
                err.push("End Date Invalid");
            }
            if(input.startDate > input.EndDate){
                err.push("Start Date must be less than End Date");
            }
            if(input.students <= 0){
                err.push("Students cannot empty");
            }            
            
            return err;
        }

        function sendRequest(url, payload) {
           
            Swal.showLoading();

            $.ajax({
                type: "POST",
                url: url,
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: payload,
                success: function (response) {
                    Swal.close();
                    if (response.status == 0) {
                        Swal.fire({
                            title: 'Success',
                            text: response.message,
                            icon: 'success'
                        }).then((result) => {
                            history.back();
                        });
                        
                        return;
                    }
                    Swal.fire({
                        title: 'Error',
                        text: response.message,
                        icon: 'error'
                    });
                },
                error: function(response){
                    Swal.close();
                    Swal.fire({
                        title: 'Error',
                        text: response.responseJSON.message,
                        icon: 'error'
                    });
                }
            });
        }


    </script>
}
